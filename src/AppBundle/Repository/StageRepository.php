<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Event;
use AppBundle\Entity\Stage;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Symfony\Component\Workflow\Exception\LogicException;

/**
 * StageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StageRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Event $event
     * @return Stage
     * @throws \Doctrine\ORM\NoResultException
     */
    public function findLastActiveStage(Event $event)
    {
        $query = $this->_em->createQuery('SELECT s FROM AppBundle:Stage s WHERE s.event=:event AND s.beginAt<CURRENT_TIMESTAMP() ORDER BY s.beginAt DESC');
        $query->setMaxResults(1);
        $query->setParameter('event', $event);
        try {
            return $query->getSingleResult();
        } catch (NonUniqueResultException $e) {
            throw new \LogicException();
        }
    }
}
